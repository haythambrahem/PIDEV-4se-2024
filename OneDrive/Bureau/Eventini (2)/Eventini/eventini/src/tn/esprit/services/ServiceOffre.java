/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tn.esprit.services;

import tn.esprit.entity.Personne;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import tn.esprit.entity.Offre;
import tn.esprit.entity.Personne;
import tn.esprit.entity.Status;
import tn.esprit.entity.TypeOffre;
import tn.esprit.tools.MyDB;

/**
 *
 * @author imen
 */
public class ServiceOffre implements IserviceOffre {
    private static ServiceOffre instance;
    PreparedStatement preparedStatement;
    Connection connection;
    
    public ServiceOffre() {
        connection =  MyDB.getinstance().getCon();

}
    
    public static ServiceOffre getInstance() {
        if (instance == null) {
            instance = new ServiceOffre();
        }
        return instance;
    }

    @Override
    public void ajouter(Offre of ,Personne  pers) throws SQLException {
    
     Personne personne =new Personne();
    String req = "INSERT INTO offre ( dateDebut,dateFin,nomOffre, description, typeOffre,valeurOffre,imageOffre,status,id) VALUES (?, ?, ?, ?,?,?,?,?,?)";
    PreparedStatement ps = connection.prepareStatement(req, Statement.RETURN_GENERATED_KEYS); // Indiquez RETURN_GENERATED_KEYS
    
    // Définissez l'ID manuellement
    
    ps.setDate(1, new java.sql.Date(of.getDateDebut().getTime()));
    ps.setDate(2, new java.sql.Date(of.getDateFin().getTime()));
    ps.setString(3, of.getNomOffre());
    ps.setString(4, of.getDescription());
    ps.setString(5, of.getTypeOffre().toString());
    ps.setInt(6, of.getValeurOffre());
    ps.setString(7, of.getImageOffre());
    ps.setString(8, of.getStatus().toString());
    ps.setInt(9,pers.getId());
    
    ps.executeUpdate();
    
    // Récupérez l'ID auto-incrémenté (s'il est généré par la base de données)
       ResultSet generatedKeys = ps.getGeneratedKeys();
       if (generatedKeys.next()) {
        int autoGeneratedID = generatedKeys.getInt(1);
        // Vous pouvez utiliser autoGeneratedID comme nouvel ID auto-incrémenté
        of.setIdOffre(autoGeneratedID);
    }
}

    
    public boolean offreExisteDeja(String titre) {
    try {
       
       String req = "SELECT COUNT(*) FROM offre WHERE nomOffre = ?";
        PreparedStatement ps = connection.prepareStatement(req);
        ps.setString(1, titre);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            int count = rs.getInt(1);
            return count > 0;
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return false;
}

public boolean existeOffre(String nomOffre) throws SQLException {
    // Écrivez la requête SQL pour rechercher l'offre par nom
    String req = "SELECT COUNT(*) FROM offre WHERE nomOffre = ?";
    PreparedStatement ps = connection.prepareStatement(req);
    ps.setString(1, nomOffre);

    ResultSet rs = ps.executeQuery();
    rs.next();
    int count = rs.getInt(1);

    return count > 0; // Retourne vrai si au moins une offre avec ce nom existe
}

@Override
public void modifier(String nomOffre, Offre offreModifie) throws SQLException {
    if(existeOffre( nomOffre)) {
        // Si l'offre avec le nomOffre spécifié existe, effectuez la mise à jour

        // Construisez la requête SQL de mise à jour
        String req = "UPDATE offre SET description=?, dateDebut=?, dateFin=?, typeOffre=?, valeurOffre=?, imageOffre=?, status=? WHERE nomOffre=?";
        PreparedStatement ps = connection.prepareStatement(req);

        // Spécifiez les valeurs pour les paramètres de la requête préparée
        ps.setString(1, offreModifie.getDescription());
        ps.setDate(2, new java.sql.Date(offreModifie.getDateDebut().getTime()));
        ps.setDate(3, new java.sql.Date(offreModifie.getDateFin().getTime()));
        ps.setString(4, offreModifie.getTypeOffre().toString());
        ps.setInt(5, offreModifie.getValeurOffre());
        ps.setString(6, offreModifie.getImageOffre());
        ps.setString(7, offreModifie.getStatus().toString());
        ps.setString(8, nomOffre);

        // Exécutez la mise à jour
        ps.executeUpdate();
    } else {
        System.err.println("Aucune offre trouvée avec le nomOffre spécifié dans la base de données.");
    }
}






//    @Override
//    public void modifier(int id, Offre offreModifie) throws SQLException {
//       if (existeOffre(id)) {
//    } else {
//        System.err.println("L'ID spécifié n'existe pas dans la base de données.");
//        return; // Sortez de la méthode si l'ID n'existe pas
//        }
//    
//    // Si l'ID existe, effectuez la mise à jour
//   String req = "UPDATE offre SET nomOffre=?, description=?, dateDebut=?, dateFin=?, typeOffre=?, valeurOffre=?, imageOffre=?, status=? WHERE idOffre=?";
//    PreparedStatement ps = connection.prepareStatement(req);
//
//    // Spécifiez les valeurs pour les paramètres de la requête préparée
//    ps.setString(1, offreModifie.getNomOffre());
//    ps.setString(2, offreModifie.getDescription());
//    ps.setDate(3, new java.sql.Date(offreModifie.getDateDebut().getTime()));
//    ps.setDate(4, new java.sql.Date(offreModifie.getDateFin().getTime()));
//    ps.setString(5, offreModifie.getTypeOffre().toString());
//    ps.setInt(6, offreModifie.getValeurOffre());
//    ps.setString(7, offreModifie.getImageOffre());
//    ps.setString(8, offreModifie.getStatus().toString());
//    ps.setInt(9, id);
//    ps.executeUpdate();
//} 




    @Override
    public boolean existeOffre(int idOffre) throws SQLException {
         String req = "SELECT idOffre FROM offre WHERE idOffre=?";
    PreparedStatement ps = connection.prepareStatement(req);
    ps.setInt(1, idOffre);
    
    ResultSet rs = ps.executeQuery();
    
    return rs.next();
    }
    @Override
public Offre chercherOffre(String nomOffre) throws SQLException {
    String req = "SELECT * FROM offre WHERE nomOffre=?";
    PreparedStatement ps = connection.prepareStatement(req);
    ps.setString(1, nomOffre);

    ResultSet rs = ps.executeQuery();

    if (rs.next()) {
        Offre offre = new Offre();
        offre.setIdOffre(rs.getInt("idOffre"));
        offre.setNomOffre(rs.getString("nomOffre"));
        offre.setDescription(rs.getString("description"));
        // Pour l'attribut de type TypeOffre (enum)
        offre.setTypeOffre(TypeOffre.valueOf(rs.getString("typeOffre"))); // Supposons que le typeOffre est stocké sous forme de chaîne
        offre.setDateDebut(rs.getDate("dateDebut"));
        offre.setDateFin(rs.getDate("dateFin"));
        // Pour l'attribut de type Status (enum)

        offre.setStatus(Status.valueOf(rs.getString("status"))); 

        offre.setValeurOffre(rs.getInt("ValeurOffre")); // Supposons que le prix est un entier

        // Ajoutez ici l'extraction de l'image s'il y a une colonne d'image dans la base de données
        offre.setImageOffre(rs.getString("imageOffre")); // Supposons que l'image est stockée sous forme de chaîne

        return offre;
    } else {
        return null;
    }
}


//
//@Override
//public void supprimer(String nomOffre) throws SQLException {
//    if (!existeOffre(nomOffre)) {
//        System.err.println("Aucune offre trouvée avec le nom spécifié dans la base de données.");
//        return; // Sortez de la méthode si l'offre n'existe pas
//    }
//
//    // Si l'offre existe, effectuez la suppression
//    String req = "DELETE FROM offre WHERE nomOffre=?";
//    PreparedStatement ps = connection.prepareStatement(req);
//    ps.setString(1, nomOffre);
//
//    ps.executeUpdate();
//}



@Override

public void supprimer(String nomOffre) throws SQLException {
    String reqSuppressionPanier = "DELETE FROM panier WHERE idOffre = (SELECT idOffre FROM offre WHERE nomOffre = ?)";
    PreparedStatement psSuppressionPanier = connection.prepareStatement(reqSuppressionPanier);
    psSuppressionPanier.setString(1, nomOffre);
    psSuppressionPanier.executeUpdate();

    String reqSuppressionOffre = "DELETE FROM offre WHERE nomOffre = ?";
    PreparedStatement psSuppressionOffre = connection.prepareStatement(reqSuppressionOffre);
    psSuppressionOffre.setString(1, nomOffre);
    psSuppressionOffre.executeUpdate();
}



//    @Override
//    public void supprimer(int id) throws SQLException {
//       if (!existeOffre(id)) {
//        System.err.println("L'ID spécifié n'existe pas dans la base de données.");
//        return; // Sortez de la méthode si l'ID n'existe pas
//    }
//    
//     Si l'ID existe, effectuez la suppression
//    String req = "DELETE FROM offre WHERE idOffre=?";
//    PreparedStatement ps = connection.prepareStatement(req);
//    ps.setInt(1, id); 
//    
//    ps.executeUpdate();
//    
//    }


    
    
    
    
    
    @Override
public List<Offre> recuperer() throws SQLException {
    List<Offre> listeOffres = new ArrayList<>();

    // Écrivez la requête SQL pour récupérer les offres
    String req = "SELECT idOffre, nomOffre, description, dateDebut, dateFin, typeOffre, valeurOffre, imageOffre, status, id FROM offre";

    PreparedStatement ps = connection.prepareStatement(req);
    ResultSet rs = ps.executeQuery();

    while (rs.next()) {
        // Créez un nouvel objet Offre pour chaque enregistrement dans la base de données
        Offre offre = new Offre();
        offre.setIdOffre(rs.getInt("idOffre"));
        offre.setNomOffre(rs.getString("nomOffre"));
        offre.setDescription(rs.getString("description"));
        offre.setDateDebut(rs.getDate("dateDebut"));
        offre.setDateFin(rs.getDate("dateFin"));
        offre.setTypeOffre(TypeOffre.valueOf(rs.getString("typeOffre"))); // Vous devez avoir une méthode pour convertir une chaîne en enum TypeOffre
        offre.setValeurOffre(rs.getInt("valeurOffre"));
        offre.setImageOffre(rs.getString("imageOffre"));
        offre.setStatus(Status.valueOf(rs.getString("status"))); // Vous devez avoir une méthode pour convertir une chaîne en enum Status

        // Créez un objet User si nécessaire et définissez-le dans l'offre
            Personne personne = new Personne();
        personne.setId(rs.getInt("id")); // Remplacez le type de données approprié et la méthode d'obtention de l'ID de l'utilisateur
        offre.setPersonne(personne);

        // Ajoutez l'offre à la liste
        listeOffres.add(offre);
    }

    return listeOffres;
}

//    
//    @Override
//    public void ajouter(Offre of, Personne pers) throws SQLException {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }

//    @Override
//    public void ajouter(Offre of, Personne pers) throws SQLException {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }


    
    
    
    
}
